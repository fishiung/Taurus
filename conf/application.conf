akka {
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true
}


## Modules
# https://www.playframework.com/documentation/latest/Modules
# ~~~~~
# Control which modules are loaded when Play starts.  Note that modules are
# the replacement for "GlobalSettings", which are deprecated in 2.5.x.
# Please see https://www.playframework.com/documentation/latest/GlobalSettings
# for more information.
#
# You can also extend Play functionality by using one of the publically available
# Play modules: https://playframework.com/documentation/latest/ModuleDirectory
play.modules {
  # By default, Play will load any class called Module that is defined
  # in the root package (the "app" directory), or you can define them
  # explicitly below.
  # If there are any built-in modules that you want to disable, you can list them here.
  #enabled += my.application.Module

  # If there are any built-in modules that you want to disable, you can list them here.
  #disabled += ""
}

play.i18n {
  langs = ["en"]

  # Whether the language cookie should be secure or not
  angCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  langCookieHttpOnly = true
}


play.http {
  secret.key = "fHRqIol/>tn26elksjdfilasgddsfhgyuj4356zzSDf"
  parser.maxMemoryBuffer = 10MB
  parser.maxDiskBuffer = 20MB
  forwarded.trustedProxies=["::1", "127.0.0.1"]
}

play.filters.headers {
  # The X-Frame-Options header. If null, the header is not set.
  frameOptions = null

  # The X-XSS-Protection header. If null, the header is not set.
  xssProtection = null

  # The X-Content-Type-Options header. If null, the header is not set.
  contentTypeOptions = null

  # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
  permittedCrossDomainPolicies = null

  # The Content-Security-Policy header. If null, the header is not set.
  # contentSecurityPolicy = "default-src 'unsafe-inline'"
  contentSecurityPolicy = null

  # The Referrer-Policy header. If null, the header is not set.
  referrerPolicy = null

  # If true, allow an action to use .withHeaders to replace one or more of the above headers
  allowActionSpecificHeaders = false
}

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
# https://www.playframework.com/documentation/latest/ScalaWS#Configuring-WS
# ~~~~~
# The HTTP client primarily used for REST APIs.  The default client can be
# configured directly, but you can also create different client instances
# with customized settings. You must enable this by adding to build.sbt:
#
# libraryDependencies += ws // or javaWs if using java
#
play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/ScalaHttpFilters
# https://www.playframework.com/documentation/latest/JavaHttpFilters
# ~~~~~
# Filters run code on every request. They can be used to perform
# common logic for all your actions, e.g. adding common headers.


## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#slick.dbs.default.profile= "slick.jdbc.MySQLProfile$"
#slick.dbs.default.db.driver="com.mysql.jdbc.Driver"
#slick.dbs.default.db.url="jdbc:mysql://localhost:3306/play?useSSL=false"

slick.dbs.default {
  driver = "slick.driver.MySQLDriver$"
  db {
    driver = "com.mysql.jdbc.Driver"
    url = "jdbc:mysql://localhost:3306/play?useSSL=false"
    user = "root"
    password = "root"
    logSql=true
    connectionTimeout = 5 seconds
    partitionCount = 1
    maxConnectionsPerPartition = 20
    minConnectionsPerPartition = 10
    acquireIncrement = 1
    acquireRetryAttempts = 5
    acquireRetryDelay = 5 seconds
    acquireRetryDelay = 5 seconds
    idleMaxAge = 10 minute
    idleConnectionTestPeriod = 5 minutes
    initSQL = "SELECT 1"
    maxConnectionAge = 1 hour
  }
}